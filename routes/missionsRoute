const { sequelize, Missions, Squads } = require('../models');
const { newMissionValidation, updateMissionValidation, } = require("../joi-validation.js");
const express = require('express');

const route = express.Router();
route.use(express.json());
route.use(express.urlencoded({ extended: true }));


route.get('/', (req, res) => {

    Missions.findAll({
        include: ['assignedSquad']
         })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );
    
});

route.get('/:id', (req, res) => {

    Missions.findOne({ where: { id: req.params.id },
        include: ['assignedSquad']
          })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );

});

route.get('/squad/:id', (req, res) => {

    Missions.findOne({ where: { SquadID: req.params.SquadID },
        include: ['assignedSquad']
          })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );

});

route.post('/', (req, res) => {

    const validEntry = newMissionValidation.validate(req.body);
  
    if(validEntry.error){
        res.status(422).json({ msg: validEntry.error.message })
    }else{
    
    Missions.create({
        description: req.body.description, 
        location: req.body.location, 
        SquadID: req.body.SquadID,
        missionStatus: req.body.missionStatus,
         })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );

}});

route.put('/:id', (req, res) => {

    const validEntry = updateMissionValidation.validate(req.body);
  
    if(validEntry.error){
        res.status(422).json({ msg: validEntry.error.message })
    }else{
    
    Missions.findOne({ where: { id: req.params.id } })
        .then( usr => {
            usr.description = req.body.description;
            usr.location = req.body.location;
            usr.SquadID = req.body.SquadID;
            usr.missionStatus = req.body.missionStatus;

            usr.save()
                .then( rows => res.json(rows) )
                .catch( err => res.status(500).json(err) );
        })
        .catch( err => res.status(500).json(err) );

}});

route.delete('/:id', (req, res) => {

    Missions.findOne({ where: { id: req.params.id } })
        .then( usr => {
            usr.destroy()
                .then( rows => res.json(rows) )
                .catch( err => res.status(500).json(err) );
        })
        .catch( err => res.status(500).json(err) );
});

module.exports = route;