const { sequelize, Squads } = require('../models');
const { newSquadValidation, updateSquadValidation } = require("../joi-validation.js");
const express = require('express');

const jwt = require('jsonwebtoken');
require('dotenv').config();

const route = express.Router();
route.use(express.json());
route.use(express.urlencoded({ extended: true }));

function authToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
  
    if (token == null) return res.status(401).json({ msg: err });
  
    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
    
        if (err) return res.status(403).json({ msg: err });
    
        req.user = user;
    
        next();
    });
}

route.use(authToken);


route.get('/squads/', (req, res) => {

    Squads.findAll()
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );
    
});

route.get('/squads/:id', (req, res) => {

    Squads.findOne({ where: { id: req.params.id } })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );

});

route.post('/squads/', (req, res) => {

    const validEntry = newSquadValidation.validate(req.body);
  
    if(validEntry.error){
        res.status(422).json({ msg: validEntry.error.message })
    }else{
    
    Squads.create({ name: req.body.name, type: req.body.type, status: req.body.status })
        .then( rows => res.json(rows) )
        .catch( err => res.status(500).json(err) );

}});

route.put('/squads/:id', (req, res) => {

    const validEntry = updateSquadValidation.validate(req.body);
  
    if(validEntry.error){
        res.status(422).json({ msg: validEntry.error.message })
    }else{
    
    Squads.findOne({ where: { id: req.params.id } })
        .then( usr => {
            usr.name = req.body.name;
            usr.type = req.body.type;
            usr.status = req.body.status;

            usr.save()
                .then( rows => res.json(rows) )
                .catch( err => res.status(500).json(err) );
        })
        .catch( err => res.status(500).json(err) );

}});

route.delete('/squads/:id', (req, res) => {

    Squads.findOne({ where: { id: req.params.id } })
        .then( usr => {
            usr.destroy()
                .then( rows => res.json(rows) )
                .catch( err => res.status(500).json(err) );
        })
        .catch( err => res.status(500).json(err) );
});


module.exports = route;